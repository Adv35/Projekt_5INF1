package com.adv;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * UserDataAccess is responsible for all database operations related to the User.
 */

public class UserDataAccess {

    private final Database db = new Database();

    /**
     * Finds a single user by their unique username.
     * @param username The username to search for.
     * @return A User object if found, otherwise null.
     */
    public User findUserByUsername(String username) {
        String sql = "SELECT * FROM users WHERE username = ? LIMIT 1";

        try (Connection conn = db.connect();
             PreparedStatement preparedStatement = conn.prepareStatement(sql)) {

            preparedStatement.setString(1, username);

            try (ResultSet rs = preparedStatement.executeQuery()) {
                if (rs.next()) {
                    return mapRowToUser(rs);
                }
            }
        } catch (SQLException e) {
            System.err.println("Error finding user by username: " + e.getMessage());
        }
        // If no user was found or an error occurred, return null.
        return null;
    }


    // It takes a ResultSet and creates a User object from the current row.
    private User mapRowToUser(ResultSet rs) throws SQLException {
        return new User(
                rs.getString("user_id"),
                rs.getString("first_name"),
                rs.getString("last_name"),
                rs.getString("username"),
                rs.getString("password_hash"),
                rs.getString("email"),
                rs.getString("role")
        );
    }

    /**
     * Inserts a new user into the database.
     * The User object is created first in the application logic, then passed here to be saved.
     * @param user The User object to create.
     */
    public void createUser(User user) {
        // Note: ID generated by Database
        String sql = "INSERT INTO users (first_name, last_name, username, password_hash, email, role) VALUES (?, ?, ?, ?, ?, ?::roles)"; // "::roles" is used for casting String to ENUM type

        try (Connection conn = db.connect();
             PreparedStatement preparedStatement = conn.prepareStatement(sql)) {
            preparedStatement.setString(1, user.getFirstName());
            preparedStatement.setString(2, user.getLastName());
            preparedStatement.setString(3, user.getUsername());
            preparedStatement.setString(4, user.getPasswordHash());
            preparedStatement.setString(5, user.getEmail());
            preparedStatement.setString(6, user.getRole());
            preparedStatement.executeUpdate();
            System.out.println("Successfully created user: " + user.getUsername());
        } catch (SQLException e) {
            System.err.println("Error creating user: " + e.getMessage());
        }
    }
}